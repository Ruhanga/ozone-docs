{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quick Start","text":"<p>This section of the Ozone Docs is designed for digital health technical implementers, focusing on how to install, configure, and run Ozone HIS.</p>"},{"location":"#quick-start","title":"Quick Start","text":"Did you check the online demo?  <p>Before diving into the Quick Start or implementer guides, visit our website and click Try Demo to explore the official Ozone Pro online demo.</p>  Locally Gitpod <p>Only three commands in a terminal:</p> <pre><code>curl -s https://raw.githubusercontent.com/ozone-his/ozone/main/scripts/install-stable.sh | bash /dev/stdin\n</code></pre> <pre><code>cd ozone/run/docker/scripts/\n</code></pre> <pre><code>./start-demo.sh\n</code></pre> <p> It may take some time to download and setup Ozone for the first time.</p> <p>Then, start browsing Ozone. This requires you to log into each component separately:</p> HIS Component URL OpenMRS 3 http://localhost/openmrs/spa SENAITE http://localhost:8081/senaite Odoo http://localhost:8069 Superset http://localhost:8088 <p>Just one click:</p> <p></p> <p> It may take some time to download and setup Ozone for the first time.</p> <p>Gitpod will automatically launch a new tab for OpenMRS 3.</p> <p>You can navigate to other Ozone HIS components via the PORTS tab of the Gitpod window:</p> <p></p> <p>Each component will require you to log in separately with their own credentials:</p> HIS Component Username Password OpenMRS 3 admin Admin123 SENAITE admin password Odoo admin admin Superset admin password <p>Did you know?</p> <p>Ozone Pro comes with single sign-on and all its interoperability layer is secured with OAuth2.</p>"},{"location":"config-points/","title":"Configuration Points","text":"<p>In this section, we provide a comprehensive list of configuration points available in Ozone, organized by EIP services and thereby grouped by pairs of components.</p>"},{"location":"config-points/#keycloak-superset-flows","title":"Keycloak-Superset Flows","text":""},{"location":"config-points/#supersetpolling-interval","title":"<code>superset.polling-interval</code>","text":"<ul> <li>Location: <code>ozone/distro/configs/eip-keycloak-superset/properties/application.properties</code></li> <li>Possible values: The time in milliseconds. Defaults to 30000 \u2013 Controls the polling interval for the <code>eip-keycloak-superset</code> service, which regularly fetches the set of roles from Superset to synchronize them with Keycloak.</li> </ul> <p>Sample configuration:</p> <pre><code>superset.polling-interval=30000\n</code></pre>"},{"location":"config-points/#erpnext-openmrs-flows","title":"ERPNext-OpenMRS Flows","text":""},{"location":"config-points/#erpnextopenmrsenablepatientsync","title":"<code>erpnext.openmrs.enable.patient.sync</code>","text":"<ul> <li>Location: <code>ozone/distro/configs/eip-erpnext-openmrs/application.properties</code></li> <li>Possible values:<ul> <li> <code>false</code> \u2013 An OpenMRS patient is synchronised as an ERPNext customer when a first billable item is ordered from OpenMRS.</li> <li> <code>true</code> \u2013 An OpenMRS patient is always synchronised as an ERPNext customer.</li> </ul> </li> </ul> <p>Sample configuration:</p> <pre><code>erpnext.openmrs.enable.patient.sync=false\n</code></pre>"},{"location":"config-points/#odoo-openmrs-flows","title":"Odoo-OpenMRS Flows","text":""},{"location":"create-distro/","title":"Create Your Own Distribution of Ozone HIS","text":""},{"location":"create-distro/#why-your-own-distribution","title":"Why your own distribution?","text":"<p>Beyond experimenting with the Quick Start guide, implementers of Ozone HIS will soon discover the need to provide their own configurations and possibly bespoke customizations to Ozone HIS. We recommend to do so through creating and managing your own distribution of Ozone HIS.</p> <p>Ozone provides a series Apache Maven-based tools to facilitate the assembly of your own tailored HIS distribution. This starts with the Ozone Maven Archetype.</p>"},{"location":"create-distro/#the-ozone-maven-archetype","title":"The Ozone Maven Archetype","text":"<p>Prequisites</p> <p>Install Git , Maven  and Docker Compose </p> <p>The Ozone Maven Archetype generates a foundational skeleton project, providing a customizable base for any specific implementation requirements.</p>"},{"location":"create-distro/#1-configure-maven","title":"1) Configure Maven","text":"<p>Edit your Maven <code>settings.xml</code> file (usually located at <code>~/.m2/settings.xml</code>) and add the following block to it: <pre><code>&lt;profiles&gt;\n  &lt;profile&gt;\n    &lt;id&gt;ozone&lt;/id&gt;\n    &lt;repositories&gt;\n      &lt;repository&gt;\n        &lt;id&gt;archetype&lt;/id&gt;\n        &lt;url&gt;https://nexus.mekomsolutions.net/repository/maven-public&lt;/url&gt;\n        &lt;releases&gt;\n          &lt;enabled&gt;true&lt;/enabled&gt;\n          &lt;checksumPolicy&gt;fail&lt;/checksumPolicy&gt;\n        &lt;/releases&gt;\n        &lt;snapshots&gt;\n          &lt;enabled&gt;true&lt;/enabled&gt;\n          &lt;checksumPolicy&gt;warn&lt;/checksumPolicy&gt;\n        &lt;/snapshots&gt;\n      &lt;/repository&gt;\n    &lt;/repositories&gt;\n  &lt;/profile&gt;\n&lt;/profiles&gt;\n\n&lt;activeProfiles&gt;\n  &lt;activeProfile&gt;ozone&lt;/activeProfile&gt;\n&lt;/activeProfiles&gt;\n</code></pre></p>"},{"location":"create-distro/#2-generate-the-archetype","title":"2) Generate the archetype","text":"<p>Use Maven's archetype tools to generate a new Ozone implementation project structure:</p> <pre><code>mvn org.apache.maven.plugins:maven-archetype-plugin:3.2.1:generate -DarchetypeArtifactId=maven-archetype -DarchetypeGroupId=com.ozonehis \n</code></pre> <p>This will prompt you for several key variables for your Maven project:</p> Prompt variable Sample value Explanation <code>distributionName</code> <code>Ozone Gruzinia</code> A name for your distribution. For example, a reference Ozone implementation for the imaginary country of Gruzinia could be named \"Ozone Gruzinia\". <code>groupId</code> <code>gz.moh</code> The Maven group ID  that will be used for the implementation artifact. For \"Ozone Gruzinia\" this might be something like <code>gz.moh</code>. <code>artifactId</code> <code>ozone-gruzinia</code> The Maven artifact ID  that will be used for the implementation artifact. For \"Ozone Gruzinia\" this might be <code>ozone-gruzinia</code>. <code>package</code> <code>gz.moh</code> A required property, but not used. To make it easy just accept the default value, which should default to be the same as the <code>groupId</code>. <code>version</code> <code>1.0.0-SNAPSHOT</code> The version number for the distribution, it starts by default at <code>1.0.0-SNAPSHOT</code>. <p>This will create a bare-bones Ozone implementation project that should look like this: <pre><code>ozone-gruzinia/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 config\n\u2502     \u2514\u2500\u2500 openmrs\n\u2502         \u251c\u2500\u2500 frontend_config\n\u2502         \u2514\u2500\u2500 initializer_config\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 readme\n\u2502     \u2514\u2500\u2500 impl-guide.md\n\u2514\u2500\u2500 scripts\n    \u251c\u2500\u2500 mvnw\n    \u251c\u2500\u2500 mvnw.cmd\n    \u251c\u2500\u2500 mvnwDebug\n    \u2514\u2500\u2500 mvnwDebug.cmd\n</code></pre></p>"},{"location":"create-distro/#available-commands","title":"Available commands","text":"Goal Command Explanation Build the distribution <pre>./scripts/mvnw clean package</pre> Assembles and packages your distribution, incorporating any configurations and customizations you've applied. Access start/stop/destroy commands <pre>source target/go-to-scripts-dir.sh</pre> Navigates to the directory containing the scripts for starting, stopping, and destroying the distribution, making these commands readily accessible. Start the distribution <pre>./start-demo.sh</pre> Initiates and launches all components of the Ozone HIS, bringing up the system. Stop the distribution <pre>./stop-demo.sh</pre> Gracefully halts all Ozone HIS services, effectively shutting down the system. Destroy the distribution <pre>./destroy-demo.sh</pre> Completely removes the distribution, clearing all its components and data, ideal for resetting the system or rectifying persistent issues ahead of a restart or a rebuild and restart. <p>You are now ready to tailor Ozone to fit your specific requirements. Proceed to the following page for guidance on how to override default configurations.</p>"},{"location":"override-configs/","title":"Overriding Inherited Configurations","text":"<p>Coming soon:</p> <ul> <li>Using the Ozone Maven Archetype.</li> <li>Using the Maven parent.</li> <li>Overriding inherited configurations. Eg. OpenMRS frontend and backend configs, Odoo config, etc.</li> </ul>"},{"location":"devs/","title":"Architecture Overview","text":"<p>This section of the Ozone Docs is designed for software architects, engineers, and developers. It provides comprehensive information on Ozone's architecture, guides on integrating new software components, and technical advice on developing within Ozone.</p>"},{"location":"devs/#architecture-overview","title":"Architecture Overview","text":""},{"location":"devs/#ozone-platform","title":"Ozone Platform","text":"<p>Ozone Platform serves as the interoperability layer that seamlessly integrates HIS components by enabling data flows between them:</p> <p> </p> HIS components glued with configurable data flows. <p>Ozone Platform is a decenstralised mesh of peer-to-peer interoperability services, each an instance of Ozone's EIP Client.</p> <p>Each service connects a pair of HIS components of Ozone's digital health sofware suite:</p> <p> </p> Mesh of peer-to-peer services integrating HIS components."},{"location":"devs/#ozones-eip-client","title":"Ozone's EIP Client","text":"<p>The core of the Ozone Platform is powered by the EIP Client(1), a Spring Boot application that runs Apache Camel routes. This application acts as the ETL<sup>1</sup> agent between two components of the HIS.</p> <ol> <li>Enterprise Integration Patterns</li> </ol> <p> </p> Peer-to-peer service between two HIS components. <p>The EIP Client facilitates the exchange of FHIR resources between two components of Ozone's digital health software suite. This exchange of FHIR resources is precisely what makes the data flows of Ozone HIS.</p> <p>Development in Ozone primarily involves assembling peer-to-peer services using the EIP Client. This client is equipped with several built-in features, simplifying the development process:</p> <ul> <li>It's a ready-to-use application designed for implementing Camel routes.</li> <li> <p>It manages authentication:</p> <ul> <li>With Ozone FOSS's HIS components.</li> <li>With Ozone Pro's Identity Provider (IdP). \u00a0\u00a0  Created by potrace 1.16, written by Peter Selinger 2001-2019   Pro</li> </ul> </li> <li> <p>It includes a variety of common libraries to implement data flows that can be reused across different services.</p> </li> </ul> <ol> <li> <p>Extract, Transform, Load\u00a0\u21a9</p> </li> </ol>"},{"location":"devs/e2e-tests/","title":"Automated End-to-End Tests","text":"<p>All data flows within Ozone and the actions performed on its HIS components are rigorously validated using a comprehensive suite of automated end-to-end (E2E) tests.</p> <p>This section is designed to help Ozone developers familiarize themselves with <code>ozone-e2e</code>, the repository where all end-to-end tests for Ozone are maintained. It will guide you through the architecture of a typical end-to-end test case and provide the necessary knowledge and practical steps to develop your own test cases.</p> <p>Some facts about <code>ozone-e2e</code></p> <ul> <li>We use Playwright , the automation testing framework.</li> <li>We test our data flows through the actions and effects that they have on Ozone HIS components.</li> <li>We focus on how these actions and effects are experienced by end users.</li> </ul> <p>Prequisites</p> <p>Install Node.js version 18 or higher and npm version 10 or higher, see here </p>"},{"location":"devs/e2e-tests/#setting-up-ozone-e2e","title":"Setting up <code>ozone-e2e</code>","text":"<p>Clone the Ozone E2E Repository: Execute the command <pre><code>git clone https://github.com/ozone-his/ozone-e2e\n</code></pre> Navigate to the Project Directory: Change into the directory with <pre><code>cd ozone-e2e\n</code></pre> Install Dependencies: Install the required packages <pre><code>npm install\n</code></pre></p>"},{"location":"devs/e2e-tests/#project-structure","title":"Project structure","text":"<p>The actual E2E tests live in the <code>e2e</code> subfolder that is organised as follows: <pre><code>e2e\n \u251c\u2500\u2500 tests\n |   ^ Contains test cases.\n \u2514\u2500\u2500 utils\n     ^ Contains utilities needed to set up and tear down tests,\n       as well as methods required by the tests to run.\n</code></pre></p> <p>The data flows resulting from the integration between specific component pairs (e.g., between Odoo and OpenMRS) are typically tested through a designated test file for each pair (e.g., <code>odoo-openmrs-flows.spec.js</code>). All test files are located in the <code>e2e/tests</code> directory. We encourage you to explore and review the current set of tests to understand the testing process better and evaluate the extent of their coverage.</p>"},{"location":"devs/e2e-tests/#project-configuration","title":"Project configuration","text":"<p>Our E2E test suite is designed to interact with three distinct Ozone environments, allowing seamless switching as needed:</p> Dev Hosts the latest, bleeding-edge versions of Ozone, updated continuously as the development team commits new code to the Ozone repositories. QA Used for staging Ozone prior to releases, facilitating final rounds of testing to ensure quality before launch. Demo Features the latest stable release of Ozone, readily accessible online for demonstration purposes and advertised through the Ozone website. <p>Two important configuration variables govern the high-level behavior of our E2E test suite:</p> <ol> <li> <p><code>TEST_ENVIRONMENT</code>: This variable specifies which one of the three environments \u2014 <code>dev</code>, <code>qa</code>, or <code>demo</code> \u2014 should be targeted for testing.E.g.: <pre><code>TEST_ENVIRONMENT=dev\n</code></pre></p> </li> <li> <p><code>TEST_PRO</code>: This toggle, set to <code>true</code> for testing Ozone Pro or <code>false</code> for Ozone FOSS, determines the flavour of Ozone HIS under test.E.g.: <pre><code>TEST_PRO=false\n</code></pre></p> </li> </ol> <p>All configuration variables are set to the desired values by editing and saving the <code>.env</code> file  prior to running the tests.</p> <p>Additionally, the <code>.env</code> file contains a range of configuration variables that specify the URLs for accessing the various HIS components in each test environment, as well as the credentials needed to execute the test cases.</p> <p>Here\u2019s a clearer and more structured Markdown rendition of your instructions for running tests:</p>"},{"location":"devs/e2e-tests/#running-tests","title":"Running Tests","text":""},{"location":"devs/e2e-tests/#default-test-execution","title":"Default test execution","text":"<p>To run all tests in the test suite, use the default command:</p> <pre><code>npx playwright test\n</code></pre>"},{"location":"devs/e2e-tests/#running-specific-tests","title":"Running specific tests","text":"<p>To focus on testing data flows between specific pairs of HIS components, you can run tests contained in a specific file. For example, to test the integration data flows between Odoo and OpenMRS:</p> <pre><code>npx playwright test odoo-openmrs-flows\n</code></pre>"},{"location":"devs/e2e-tests/#selecting-your-browser","title":"Selecting your browser","text":"<p>Playwright supports various configurations for running tests across different browsers. Specify the browser using the <code>--project</code> flag. For instance, to run tests in Chromium:</p> <pre><code>npx playwright test --project=chromium\n</code></pre>"},{"location":"devs/e2e-tests/#interpreting-test-results","title":"Interpreting test results","text":"<ul> <li> <p>Passed: When all tests within the suite pass without encountering any errors, the overall result is marked as \"Passed\". This means that the application behaved as expected under the test conditions.</p> </li> <li> <p>Failed: If any test within the suite encounters an error or assertion failure during execution, the overall result is marked as \"Failed\". Determine whether the failure is specific to the test case, a particular component or feature, or the entire application. Once you've identified the root cause of the failure, implement a fix to address the issue. This may involve modifying test assertions, updating application code, or addressing environmental dependencies.</p> </li> <li> <p>Skipped: Sometimes, tests are intentionally skipped based on certain conditions or configurations. These skipped tests are not executed during the test run and are marked as \"Skipped\" in the test result.</p> </li> </ul>"},{"location":"devs/e2e-tests/#developing-test-cases","title":"Developing Test Cases","text":""},{"location":"devs/e2e-tests/#naming-test-files","title":"Naming test files","text":"<p>Our test cases cover the data flows between Ozone HIS components and we have taken the convention to group test cases by pairs of components. For example all data flows between OpenMRS and SENAITE are grouped together in a file named <code>openmrs-senaite-flows.spec.js</code> that lives in the <code>e2e/tests</code>. This file contains all test cases for data flows going from OpenMRS to SENAITE as well as those going from SENAITE to OpenMRS.</p> <p>The naming is alphabetical per convention. The data flows going both ways between hypothetical HIS components Foo and Bar would live in a file named <code>bar-foo-flows.spec.js</code> and so on and so forth for all pairs of HIS components.</p>"},{"location":"devs/e2e-tests/#testing-actions-and-effects","title":"Testing actions and effects","text":"<p>While Ozone relies on its components default behaviour and features, we do encompass in our E2E test suite the actions performed when using the user experience of the components and the effects observed throught the user experience of those components. This ensures that test are truly end-to-end with a focus on the end-user experience.</p> <p>To write a test case:</p> <ul> <li>Identify the user interactions and functionalities to test between a pair of HIS components.</li> <li>Use Playwright\u2019s API to script the actions within each test scenario, such as navigating pages, clicking buttons, filling forms, and verifying UI elements.</li> </ul>"},{"location":"devs/e2e-tests/#utilizing-playwright","title":"Utilizing Playwright","text":"<p>Leverage Playwright\u2019s comprehensive API to engage with the browser:</p> <ul> <li>Navigate to pages.</li> <li>Interact with page elements.</li> <li>Execute actions.</li> <li>Assert expected behaviors using methods like <code>expect</code>, <code>toEqual</code>, <code>toContain</code>, etc.</li> </ul> <p>For detailed usage, refer to Playwright's documentation .</p> <p>Once you've written your test, use the appropriate test runner to check that the test works as expected. For instance for the OpenMRS-SENAITE flows written in <code>openmrs-senaite-flows.spec.js</code>, run: <pre><code>npx playwright test openmrs-senaite-flows\n</code></pre></p>"},{"location":"devs/e2e-tests/#analyzing-a-sample-test-case","title":"Analyzing a sample test case","text":"<p>Again, following our example of the data flows between OpenMRS and SENAITE, let us verify that ordering a lab test for an OpenMRS patient does create the corresponding SENAITE client with an analysis request. Let us look at the sample test case code below:</p> <pre><code>import { test, expect } from '@playwright/test';\nimport { HomePage } from '../utils/functions/testBase';\nimport { patientName } from '../utils/functions/testBase';\n\nlet homePage: HomePage;\n\ntest.beforeEach(async ({ page }) =&gt; {\n  homePage = new HomePage(page);\n  await homePage.initiateLogin();\n  await expect(page).toHaveURL(/.*home/);\n  await homePage.createPatient();\n  await homePage.startPatientVisit();\n});\n\ntest('Ordering a lab test for an OpenMRS patient creates the corresponding SENAITE client with an analysis request.', async ({ page }) =&gt; {\n\n  // replay\n  await homePage.goToLabOrderForm();\n  await page.click('button:has-text(\"Add\")');\n  await page.selectOption('#tab select', '857AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');\n  await homePage.saveLabOrder();\n\n  // verify\n  await homePage.goToSENAITE();\n  await expect(page).toHaveURL(/.*senaite/);\n  await homePage.searchClientInSENAITE();\n  const clientName = `${patientName.firstName} ${patientName.givenName}`;\n  const client = await page.$('table tbody tr:nth-child(1) td.contentcell.title div span a:has-text(\"' + clientName + '\")');\n  await expect(client).toBeVisible();\n\n});\n\ntest.afterEach(async ({ page }) =&gt; {\n  homePage = new HomePage(page);\n  await homePage.deletePatient();\n  await page.close();\n});\n</code></pre> <p>We observe that the test structure is broken down between a setup, the actual test case and a cleanup:</p> <p>Test Setup: Before the actual test, we perform some preliminary actions: logging into Ozone (with SSO), creating a new patient, and starting a visit for the newly created patient.</p> <p>Test Case: The core of each test case follows the Given-When-Then pattern (organised here as Setup-Replay-Verification). We highly recommend this structured approach as it clearly delineates the setup of the test (\"Setup\"), the end-user actions performed (\"Replay\"), and the assertion of outcomes as experienced by the end-user (\"Verification\"). In our example:</p> <ul> <li>Setup: Omitted here. All aspects of the setup have been performed in the <code>beforeEach()</code> method.</li> <li>Replay: Navigation to the lab order form, add a lab test, and save the form.</li> <li>Verification: Navigation to the SENAITE HIS component and search for the client by name. Verify that the client's name is visible in the clients list.</li> </ul> <p>Cleanup: The post-test cleanup consists of deleting the test patient and closing the browser page.</p>"},{"location":"devs/eip-client/","title":"EIP Client","text":""},{"location":"users/","title":"Overview","text":"<p>This section of the Ozone Docs is tailored for digital health decision-makers and business analysts, detailing Ozone's functionalities and highlighting its benefits for end users of health information systems and integrated digital health software.</p>"},{"location":"users/#overview","title":"Overview","text":"<p>Ozone is an easy-to-install growing suite of digital health software, integrated by a scalable interoperability framework delivering a complete health information system experience.</p> <pre><code>stateDiagram-v2\n    state \"Ozone HIS\" as ozone\n    state \"digital health software\" as state1\n    state \"interoperability framework\" as state2\n\n    state1 --&gt; ozone\n    state2 --&gt; ozone</code></pre>"},{"location":"users/#1-a-suite-of-opt-inout-digital-health-software","title":"1 \u00a0 A suite of opt in/out digital health software","text":"<p>Ozone is a ready-to-use solution, providing a pre-selected array of FOSS<sup>1</sup> components that function seamlessly together.</p> <p>It is a complete health information system allowing users to customize it by choosing which supported digital health software to include or exclude.</p>"},{"location":"users/#current-ozone-his-suite","title":"Current Ozone HIS suite","text":"HIS type Component Version EMR OpenMRS <code>3.0.0-beta.16</code> LIMS SENAITE <code>2.1.0</code> ERP Odoo <code>14</code> ERP ERPNext <code>15.12.2</code> BI Apache Superset <code>1.5.1</code> IdP JBoss Keycloak <code>22.0.0</code> <p>Ozone Pro markers</p> <p>Features and sections exclusive to Ozone Pro are marked with \u00a0\u00a0  Created by potrace 1.16, written by Peter Selinger 2001-2019   Pro.</p>"},{"location":"users/#2-an-interoperability-framework","title":"2 \u00a0 An interoperability framework","text":"<p>Ozone is powered by an interoperability EIP<sup>2</sup> framework that orchestrates seamless data flows between health information system components \u2014 EMR, LIMS, pharmacy, accounting, BI, and more.</p> <p>Sample data flows</p> <p>Clinicians' drug orders in the EMR system automatically generate items on the patient bill.</p> <p>Lab results entered into the LIMS by lab staff are immediately visible to clinicians in the EMR system.</p> <p>Data analysts can perform real-time cross-analysis of clinical and billing data on the BI platform.</p>"},{"location":"users/#what-ozone-is-not","title":"What Ozone is not","text":"<p>Ozone is not a fork of other open-source projects; it utilizes standard and officially released software components from various open-source communities.</p> <p>Ozone packages the latest LTS<sup>3</sup> versions of its components 'as-is'. Therefore it is not liable for any bugs, deficiencies, or performance issues in the bundled LTS versions of its components; these fall outside the purview of Ozone itself.</p> <p>Tip</p> <p>We generally do not document Ozone\u2019s components. Instead we refer to their own official documentation as much as possible.</p> <ol> <li> <p>Free and open-source software\u00a0\u21a9</p> </li> <li> <p>Entreprise integration patterns\u00a0\u21a9</p> </li> <li> <p>Long-term support\u00a0\u21a9</p> </li> </ol>"},{"location":"users/analytics/","title":"<span style='color:#b0b0b0;font-style:italic'>Ozone Analytics</span>","text":"<p>  Created by potrace 1.16, written by Peter Selinger 2001-2019   Pro</p>"},{"location":"users/analytics/#ozone-analytics","title":"Ozone Analytics","text":""},{"location":"users/auth/","title":"Authentication and Authorisation","text":""},{"location":"users/auth/#single-sign-on","title":"Single Sign-On","text":"<p>  Created by potrace 1.16, written by Peter Selinger 2001-2019   Pro</p>"},{"location":"users/auth/#central-authorisation","title":"Central Authorisation","text":""},{"location":"users/erpnext-openmrs/","title":"ERPNext-OpenMRS Flows","text":""},{"location":"users/erpnext-openmrs/#flows-overview","title":"Flows Overview","text":"<pre><code>    sequenceDiagram\n        participant OpenMRS\n        participant Ozone\n        participant ERPNext\n        OpenMRS-&gt;&gt;Ozone: Patients\n        Ozone-&gt;&gt;ERPNext: Customers\n        OpenMRS-&gt;&gt;Ozone: Visits\n        OpenMRS-&gt;&gt;Ozone: Drug orders\n        OpenMRS-&gt;&gt;Ozone: Lab test orders\n        Ozone-&gt;&gt;ERPNext: Quotations\n        Ozone-&gt;&gt;ERPNext: Quotation items</code></pre>"},{"location":"users/erpnext-openmrs/#flows-list","title":"Flows List","text":"Source Element Target Element OpenMRS Patient \u2192 ERPNext Customer OpenMRS Visit \u2192 ERPNext Quotation OpenMRS Billable item \u2b46 ERPNext Quotation OpenMRS Billable item \u2192 ERPNext Quotation item <p>What are the OpenMRS billable items?</p> <p>The supported billable items are:</p> <ul> <li>OpenMRS drug orders</li> <li>OpenMRS lab test orders</li> </ul>"},{"location":"users/erpnext-openmrs/#flows-details","title":"Flows Details","text":""},{"location":"users/erpnext-openmrs/#1-openmrs-patient-erpnext-customer","title":"1 \u00a0 OpenMRS Patient \u2192 ERPNext Customer","text":"<p>A patient in OpenMRS is synchronized as a corresponding customer in ERPNext.</p> <pre><code>flowchart LR\n    a[\"OpenMRS patient\"]-- 1-to-1 --&gt;b[\"ERPNext customer\"]</code></pre> <p>Options</p> <p>default option \u00a0 An OpenMRS patient is synchronised as an ERPNext customer when the first billable item is ordered from OpenMRS.</p> <p>option 1 \u00a0 An OpenMRS patient is always synchronised as an ERPNext customer.</p>"},{"location":"users/erpnext-openmrs/#2-openmrs-visit-erpnext-quotation","title":"2 \u00a0 OpenMRS Visit \u2192 ERPNext Quotation","text":"<p>A new draft ERPNext quotation is linked with an OpenMRS patient's visit as soon as the first billable item is ordered during that visit.</p> <p>Eventually, ending a patient's visit in OpenMRS submits the draft ERPNext quotation linked with this visit.</p> <pre><code>flowchart LR\n    a[\"OpenMRS visit\"]-- 1-to-1 --&gt;b[\"ERPNext quotation\"]</code></pre>"},{"location":"users/erpnext-openmrs/#3-openmrs-billable-items-erpnext-quotation","title":"3 \u00a0 OpenMRS Billable Items \u2b46 ERPNext Quotation","text":"<p>As soon as the first billable item is ordered for a patient in OpenMRS a draft quotation is created in ERPNext for the ERPNext customer corresponding to that patient, furthermore the quotation is linked with the OpenMRS patient's visit.</p> <p>All billable items ordered for a patient within the same OpenMRS visit are added to the draft ERPNext quotation linked with this OpenMRS visit.</p> <pre><code>flowchart LR\n    a[\"OpenMRS billable items\"]-- many-to-1 --&gt;b[\"ERPNext quotation\"]</code></pre>"},{"location":"users/erpnext-openmrs/#4-openmrs-billable-item-erpnext-quotation-item","title":"4 \u00a0 OpenMRS Billable Item \u2192 ERPNext Quotation Item","text":"<p>Each billable item ordered in OpenMRS during a patient's visit is synchronized in ERPNext as a quotation item in the corresponding customer's draft quotation that is linked with the OpenMRS patient's visit.</p> <pre><code>flowchart LR\n    a[\"OpenMRS billable item\"]-- 1-to-1 --&gt;b[\"ERPNext quotation item\"]</code></pre>"},{"location":"users/keycloak-openmrs/","title":"Keycloak-OpenMRS Flows","text":"<p>  Created by potrace 1.16, written by Peter Selinger 2001-2019   Pro</p>"},{"location":"users/keycloak-openmrs/#keycloak-openmrs-flows","title":"Keycloak-OpenMRS Flows","text":""},{"location":"users/keycloak-openmrs/#flows-overview","title":"Flows Overview","text":"<pre><code>    sequenceDiagram\n        participant OpenMRS\n        participant Ozone\n        participant Keycloak\n        OpenMRS-&gt;&gt;Ozone: Roles\n        Ozone-&gt;&gt;Keycloak: Roles</code></pre>"},{"location":"users/keycloak-openmrs/#flows-list","title":"Flows List","text":"Source Element Target Element OpenMRS Role \u2192 Keycloak Role OpenMRS Roles \u229d Keycloak Role"},{"location":"users/keycloak-openmrs/#flows-details","title":"Flows Details","text":""},{"location":"users/keycloak-openmrs/#1-openmrs-role-keycloak-role","title":"1 \u00a0 OpenMRS Role \u2192 Keycloak Role","text":"<p>A role in OpenMRS is synchronized as a role in Keycloak under the 'openmrs' client.</p> <pre><code>flowchart LR\n    a[\"OpenMRS role\"]-- 1-to-1 --&gt;b[\"Keycloak role\"]</code></pre>"},{"location":"users/keycloak-openmrs/#2-openmrs-roles-keycloak-role","title":"2 \u00a0 OpenMRS Roles \u229d Keycloak Role","text":"<p>Keycloak roles under the 'openmrs' client that do not exist in OpenMRS are periodically deleted.</p> <pre><code>flowchart LR\n    a[\"OpenMRS roles\"]-- delete --&gt;b[\"Keycloak role\"]</code></pre>"},{"location":"users/keycloak-superset/","title":"Keycloak-Superset Flows","text":"<p>  Created by potrace 1.16, written by Peter Selinger 2001-2019   Pro</p>"},{"location":"users/keycloak-superset/#keycloak-superset-flows","title":"Keycloak-Superset Flows","text":""},{"location":"users/keycloak-superset/#flows-overview","title":"Flows Overview","text":"<pre><code>    sequenceDiagram\n        participant Superset\n        participant Ozone\n        participant Keycloak\n        Superset-&gt;&gt;Ozone: Roles\n        Ozone-&gt;&gt;Keycloak: Roles</code></pre>"},{"location":"users/keycloak-superset/#flows-list","title":"Flows List","text":"Source Element Target Element Superset Role \u2192 Keycloak Role Superset Roles \u229d Keycloak Role"},{"location":"users/keycloak-superset/#flows-details","title":"Flows Details","text":""},{"location":"users/keycloak-superset/#1-superset-role-keycloak-role","title":"1 \u00a0 Superset Role \u2192 Keycloak Role","text":"<p>A role in Superset is synchronized as a role in Keycloak under the 'superset' client.</p> <pre><code>flowchart LR\n    a[\"Superset role\"]-- 1-to-1 --&gt;b[\"Keycloak role\"]</code></pre>"},{"location":"users/keycloak-superset/#2-superset-roles-keycloak-role","title":"2 \u00a0 Superset Roles \u229d Keycloak Role","text":"<p>Keycloak roles under the 'superset' client that do not exist in Superset are periodically deleted.</p> <pre><code>flowchart LR\n    a[\"Superset roles\"]-- delete --&gt;b[\"Keycloak role\"]</code></pre>"},{"location":"users/odoo-openmrs/","title":"Odoo-OpenMRS Flows","text":""},{"location":"users/odoo-openmrs/#flows-overview","title":"Flows Overview","text":"<pre><code>    sequenceDiagram\n        participant OpenMRS\n        participant Ozone\n        participant Odoo\n        OpenMRS-&gt;&gt;Ozone: Patients\n        Ozone-&gt;&gt;Odoo: Customers\n        OpenMRS-&gt;&gt;Ozone: Drug orders\n        OpenMRS-&gt;&gt;Ozone: Lab test orders\n        Ozone-&gt;&gt;Odoo: Quotations\n        Ozone-&gt;&gt;Odoo: Order lines</code></pre>"},{"location":"users/odoo-openmrs/#flows-list","title":"Flows List","text":"Source Element Target Element OpenMRS Patient \u2192 Odoo Customer OpenMRS Billable item \u2b46 Odoo Quotation OpenMRS Billable item \u2192 Odoo Order line <p>What are the OpenMRS billable items?</p> <p>The supported billable items are:</p> <ul> <li>OpenMRS drug orders</li> <li>OpenMRS lab test orders</li> </ul>"},{"location":"users/odoo-openmrs/#flows-details","title":"Flows Details","text":""},{"location":"users/odoo-openmrs/#1-openmrs-patient-odoo-customer","title":"1 \u00a0 OpenMRS Patient \u2192 Odoo Customer","text":"<p>A patient in OpenMRS is synchronized as a corresponding customer in Odoo.</p> <pre><code>flowchart LR\n    a[\"OpenMRS patient\"]-- 1-to-1 --&gt;b[\"Odoo customer\"]</code></pre> <p>Options</p> <p>default option \u00a0 An OpenMRS patient is synchronised as an Odoo customer when the first billable item is ordered from OpenMRS.</p> <p>option 1 \u00a0 An OpenMRS patient is always synchronised as an Odoo customer.</p>"},{"location":"users/odoo-openmrs/#2-openmrs-billable-items-odoo-quotation","title":"2 \u00a0 OpenMRS Billable Items \u2b46 Odoo Quotation","text":"<p>As soon as the first billable item is ordered for a patient in OpenMRS a draft quotation is created in Odoo for the Odoo customer corresponding to that patient.</p> <pre><code>flowchart LR\n    a[\"OpenMRS billable items\"]-- many-to-1 --&gt;b[\"Odoo quotation\"]</code></pre>"},{"location":"users/odoo-openmrs/#3-openmrs-billable-item-odoo-quotation-item","title":"3 \u00a0 OpenMRS Billable Item \u2192 Odoo Quotation Item","text":"<p>Each billable item ordered for an OpenMRS patient is synchronized in Odoo as an order line in the corresponding customer's quotation.</p> <pre><code>flowchart LR\n    a[\"OpenMRS billable item\"]-- 1-to-1 --&gt;b[\"Odoo order line\"]</code></pre>"},{"location":"users/openmrs-senaite/","title":"OpenMRS-SENAITE Flows","text":""},{"location":"users/openmrs-senaite/#flows-overview","title":"Flows Overview","text":"<pre><code>    sequenceDiagram\n        participant OpenMRS\n        participant Ozone\n        participant SENAITE\n        OpenMRS-&gt;&gt;Ozone: Patients\n        Ozone-&gt;&gt;SENAITE: Clients\n        OpenMRS-&gt;&gt;Ozone: Lab test orders\n        Ozone-&gt;&gt;SENAITE: Analysis requests\n        SENAITE-&gt;&gt;Ozone: Analyses\n        Ozone-&gt;&gt;OpenMRS: Lab results</code></pre>"},{"location":"users/openmrs-senaite/#flows-list","title":"Flows List","text":"Source Element Target Element OpenMRS Patient \u2192 SENAITE Client OpenMRS Lab test order \u2192 SENAITE Analysis request SENAITE Analyses \u2b46 OpenMRS Lab results bundle <p>What is an OpenMRS lab results bundle?</p> <p>Lab results are represented in OpenMRS as observations (obs). A lab results bundle is a set of OpenMRS obs that can be either numeric or coded data types.</p>"},{"location":"users/openmrs-senaite/#flows-details","title":"Flows Details","text":""},{"location":"users/openmrs-senaite/#1-openmrs-patient-senaite-client","title":"1 \u00a0 OpenMRS Patient \u2192 SENAITE Client","text":"<p>A patient in OpenMRS is synchronized as a corresponding client in SENAITE.</p> <pre><code>flowchart LR\n    a[\"OpenMRS patient\"]-- 1-to-1 --&gt;b[\"SENAITE client\"]</code></pre>"},{"location":"users/openmrs-senaite/#2-openmrs-lab-test-order-senaite-analysis-request","title":"2 \u00a0 OpenMRS Lab Test Order \u2192 SENAITE Analysis Request","text":"<p>As soon as a lab test is first ordered for a patient in OpenMRS, an analysis request is created in SENAITE for the corresponding client.</p> <pre><code>flowchart LR\n    a[\"OpenMRS lab test order\"]-- many-to-1 --&gt;b[\"SENAITE analysis request\"]</code></pre>"},{"location":"users/openmrs-senaite/#3-senaite-analyses-openmrs-lab-results-bundle","title":"3 \u00a0 SENAITE Analyses \u2b46 OpenMRS Lab Results Bundle","text":"<p>When an analysis request's analyses (or lab results) have been submitted in SENAITE, the lab results bundle is saved into OpenMRS as an array of obs.</p> <pre><code>flowchart LR\n    a[\"SENAITE analyses\"]-- many-to-1 --&gt;b[\"OpenMRS lab results bundle\"]</code></pre>"},{"location":"users/ozoneflows/","title":"Ozone Flows Guide","text":"<p>The following pages describe the data flows orchestrated by Ozone HIS among its supported components. These flows are fundamental to Ozone's functionality, as they leverage and integrate existing software components to provide enhanced features that are not available when these components are used independently.</p> <p>Flows are documented by pairs of components, such as:</p> <ul> <li>Flows between ERPNext and OpenMRS.</li> <li>Flows between OpenMRS and SENAITE.</li> <li>Etc.</li> </ul>"},{"location":"users/ozoneflows/#flows-documentation-structure","title":"Flows Documentation Structure","text":"<p>The structure of each flows documentation page is typically organized as follows (unless unnecessary or impractical), for each pair of components: flows overview, flows list and flows details.</p>"},{"location":"users/ozoneflows/#1-flows-overview","title":"1 \u00a0 Flows Overview","text":"<p>This section includes a sequence diagram that illustrates the high-level exchanges between two components that are facilitated through Ozone. Eg.:</p> <pre><code>    sequenceDiagram\n        participant Odoo\n        participant Ozone\n        participant openIMIS\n        Odoo-&gt;&gt;Ozone: Invoices lines\n        Ozone-&gt;&gt;openIMIS: Claim Items\n        openIMIS-&gt;&gt;Ozone: Payments\n        Ozone-&gt;&gt;Odoo: Payments</code></pre>"},{"location":"users/ozoneflows/#2-flows-list","title":"2 \u00a0 Flows List","text":"<p>A table that presents an inventory of all the flows between source data elements and target data elements, including the type of relatonship between the source data element and the target data element for each flow. Eg.:</p> Source Element Target Element Odoo Customers \u2b46 openIMIS Household Odoo Invoice line \u2192 openIMIS Claim item openIMIS Payment \u2192 Odoo Payment <p>Types of flows</p> <ul> <li>one-to-one \u00a0 \u2192</li> <li>many-to-one \u00a0 \u2b46</li> <li>deletion  \u00a0 \u229d</li> </ul>"},{"location":"users/ozoneflows/#3-flows-details","title":"3 \u00a0 Flows Details","text":"<p>In this section, each flow is described in detail, providing plain English explanations of the functional intent and outlining the various options available for each flow, where applicable.</p>"}]}